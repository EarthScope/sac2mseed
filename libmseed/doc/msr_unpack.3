.TH MSR_UNPACK 3 2005/09/26 "Libmseed API"
.SH DESCRIPTION
Unpacking of Mini-SEED records.

.SH SYNOPSIS
.nf
.B #include <libmseed.h>

.BI "MSrecord *\fBmsr_unpack\fP ( char *" record ", int " reclen ", MSrecord **" ppmsr ",
.BI "                       flag " dataflag ", flag " verbose " );
.fi

.SH DESCRIPTION
\fBmsr_unpack\fP will unpack a Mini-SEED data record and populate a
MSrecord data structure, optionally unpacking data samples.  All
multi-byte quantities will be byte-swapped to the host byte order.
The MSrecord data structure is described in \fBms_intro(3)\fP.

The \fIreclen\fP parameter specifies the length of the data record
pointed to by \fIrecord\fP in bytes.

If the pointer pointed to by \fIppmsr\fP is NULL a new MSrecord will
be allocated, if not the existing MSrecord will be reinitialized and
reused destroying any previous contents.  The \fIppmsr\fP pointer
itself must not be NULL.

If the \fIdataflag\fP flag is not zero any data samples in the record
will be unpacked/decompressed.  The following data encoding formats
are supported: ASCII, INT16, INT32, FLOAT32, FLOAT64, STEIM1 and
STEIM2.  The MSrecord.datasamples pointer will be set appropriately
and the samples will be either ASCII, 32-bit integers, 32-bit floats
or 64-bit floats with the same byte order as the host machine.
MSrecord.numsamples will be set to the actual number of samples
unpacked/decompressed.  MSrecord.sampletype will indicated the sample
type as either 'a' (ASCII), 'i' (32-bit integers), 'f' (32-bit floats)
or 'd' (64-bit doubles).  The size of each sample type in bytes is
returned by the get_samplesize(3) lookup routine.  MSrecord.unpackerr
will be set to indicate any errors encountered during
unpacking/decompression (MS_NOERROR if no errors, value of 0).

MSrecord.unpackerr can be set to the following:
.nf
MS_GENERROR: Generic unspecified error
MS_NOBLKT1000: No Blockette 1000 in record (required for Mini-SEED)
MS_UNKNOWNFORMAT: Unknown data encoding format
MS_SAMPMISMATCH: Number of samples in header does not match unpacked
MS_BADSAMPCOUNT: Requested number of samples is bad, negative?
MS_STBADLASTMATCH: Steim, last sample != reverse integration constant
MS_STBADCOMPFLAG: Steim, invalid compression flag(s)
.fi

It is left to the caller to test MSrecord.unpackerr and decide if the
error can be ignored.

The \fIverbose\fP flag controls verbosity, a value of zero will result
in no diagnostic output.

.SH ENVIRONMENT VARIABLES
The following environment variables effect the unpacking of Mini-SEED:

.nf
UNPACK_HEADER_BYTEORDER
UNPACK_DATA_BYTEORDER
UNPACK_DATA_FORMAT
UNPACK_DATA_FORMAT_FALLBACK
.fi

The UNPACK_HEADER_BYTEORDER and UNPACK_DATA_BYTEORDER variables force
the byte order of the header and data respectively.  They could be set
to either 0 (little endian) or 1 (big endian).  See \fBms_intro(3)\fP
for a description of how libmseed determines a records byte order.

The UNPACK_DATA_FORMAT variable forces the encoding format, this
should be set to any of the supported formats codes (i.e. 10 = Steim-1
compression).

The UNPACK_DATA_FORMAT_FALLBACK variable defines an encoding format
that will be used when the SEED data record does not indicate the
format, i.e. the record does not include a 1000 blockette.  By default
the fallback encoding format is 10 (Steim-1 compression).  If this
default is invoked and the byte order of the data is unspecified big
endian byte order will be assumed.  If a data record does not include
a 1000 blockette it is not Mini-SEED, the capability to read these
records is included only to support legacy data.

.SH RETURN VALUE
Returns a pointer to the MSrecord struct populated on success or NULL
on error.

.SH EXAMPLE
Skeleton code for unpacking a Mini-SEED record with msr_unpack(3):

.nf
main() {
  MSrecord *msr = NULL;
  char *record;
  int reclen;

  record = recordptr;   /* pointer to Mini-SEED record */
  reclen = 4096;        /* 4096 byte record length */

  /* Unpack record header and data samples */
  msr = msr_unpack (record, reclen, &msr, 1, verbose);

  printf ("Unpacked %d samples\n", msr->numsamples);

  /* Print record information */
  msr_print (msr, verbose);

  msr_free (&msr);
}
.fi

.SH SEE ALSO
\fBms_intro(3)\fP, \fBmsr_pack(3)\fP and \fBmsr_print(3)\fP.

.SH AUTHOR
.nf
Chad Trabant
IRIS Data Management Center
.fi
